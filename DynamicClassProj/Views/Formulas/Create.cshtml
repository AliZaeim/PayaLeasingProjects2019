@model DynamicClassProj.Models.ViewModels.FormulaDefinitionViewModel

@{
    ViewBag.Title = "ثبت فرمول";
}

<h2 class="text-center alert alert-info">ثبت فرمول</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container">
        <div class="row">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="col-sm-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.ClassName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @*@Html.EditorFor(model => model.ClassName, new { htmlAttributes = new { @class = "form-control" } })*@
                        <select id="clsName" name="ClassName" class="form-control">
                            <option value="">نام کلاس را انتخاب کنید</option>
                            @foreach (var item in Model.ClassNames)
                            {
                                <option value="@item">@item</option>
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.ClassName, "", new { @class = "text-danger" })
                    </div>
                    
                </div>
                

                <div class="form-group">
                    @Html.LabelFor(model => model.FieldName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @*@Html.EditorFor(model => model.FieldName, new { htmlAttributes = new { @class = "form-control" } })*@
                        <select id="filedNames" name="FieldName" class="form-control">
                            <option value="">بعد از انتخاب نام کلاس، نام فیلد را انتخاب کنید</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.FieldName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FormulaText, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FormulaText, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FormulaText, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.FormulaName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FormulaName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FormulaName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.IsActive)
                            @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div id="NumericFields" style="height:auto">

                </div>
            </div>
        </div>




        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="ثبت" id="btnSave" class="btn btn-success col-sm-12" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("بازگشت", "Index")
</div>

@section Scripts {
    
    <script>
        $(document).ready(function () {
            $("#clsName").change(function () {
                var N = $(this).val();
                $.ajax({
                    url: "/Formulas/GetNumericFieldsofClass",
                    type: "GET",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: { className: N },
                    success: function (result) {
                        var dt = JSON.stringify(result);
                        console.log(dt);
                        $('#NumericFields').empty();
                        $('#NumericFields').append('<p">متغیرها : <p>');
                        $.each(result, function (index, ddd) {
                            console.log(ddd);
                            $('#NumericFields').append($('<p>' + ddd.Name + " ===> " + ddd.DisplayName + '</p>'));
                            $.ajax({
                                url: "/Formulas/GetFormulaFieldsofClass",
                                type: "GET",
                                data: { className: N },
                                success: function (result) {
                                    //console.log("result count: " + result.length);
                                    $('#filedNames').empty();
                                    if (result.length !== 0) {
                                        $.each(result, function (index, item) {
                                            $('#filedNames').append($('<option>', {
                                                value: item.PropName,
                                                text: item.PropDisplayName
                                            }));
                                        });
                                    }
                                    else {
                                        $('#filedNames').append($('<option>', {
                                            value: "",
                                            text: "برای همه فیلدها فرمول نوشته شده است"
                                        }));
                                        $('#NumericFields').empty();
                                        $('#NumericFields').append($('<p style="color:red;font-weight:600"> برای همه فیلدهای فرمولی، فرمول نوشته شده است</p>'));
                                    }
                                    
                                },
                                error: function () {
                                    alert("Error");
                                }
                            });
                        });
                    },
                    error: function (xhr, status, error) {
                        ('#NumericFields').empty();
                        console.log("AJAX Error!");
                        console.log("Status: " + status);  // e.g. "error", "timeout", "abort"
                        console.log("Error: " + error);    // e.g. "Not Found"
                        console.log("Response Text: " + xhr.responseText); // server response
                    }
                });
               
            });
        });
    </script>
}
